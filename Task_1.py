# Представьте себе стопку книг. Вы кладете первую, на нее вторую и т.д.
# А теперь хотите убрать книги. Если вы уберете нижнюю - то вся стопка развалится.
# Поэтому нужно убирать сверху. В этом и заключается тип данных Stack - куча или стопка.
#
# Такой способ организации данных получил название LIFO
# (англ. last in, first out «последним пришёл — первым ушёл»).
#
# Задание: Создайте класс Batary, у которой будет определен атрибут capacity = [ ] (емкость),
# max_charge = 5 (максимальный заряд) по умолчанию, и методы:
#
# charge - заряжает батарею
#
# discharge - разряжает батарею.
#
# Переопределите метод __str__, чтобы при вызове экземпляра он представлялся в виде:
# [)))))] - максимально заряженная батарея.
# Подсказка: можете использовать методы очень похожего стандартного типа данных. Догадались какого?

class Batary:
    def __init__(self, capacity, max_charge = 5):
        self.capacity = capacity
        self.max_charge = max_charge

    def charge(self, i = 1):
        self.capacity *= i
        print(f"Батарея заряжается! На данный момент заряд батареи: [{self.capacity}]")


    def discharge(self, i = 1):
        print(f"Батарея разряжается! На данный момент заряд батареи: [{self.capacity.replace(')', '', i)}]")



    def __str__(self):
        return f"Максимально заряженная батарея - [{self.capacity}]"

bat = Batary(')')
bat.charge(4)
print('_____________________________________________________________________')
if len(bat.capacity) == bat.max_charge:
    print(bat)
print('_____________________________________________________________________')
bat.discharge(3)


